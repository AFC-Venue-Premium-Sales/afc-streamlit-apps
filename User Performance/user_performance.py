import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from user_performance_calc import (
    load_data, remove_grand_total_row, filter_columns, clean_numeric_columns, 
    split_created_by_column, add_additional_info, split_guest_column, convert_date_format,
    columns_to_keep, competition_fixture, total_budget_packages_data,
    total_budget_target_data
)

# Specified users list
specified_users = ['dcoppin', 'Jedwards', 'jedwards', 'bgardiner', 'BenT', 'jmurphy', 'ayildirim',
                   'MeganS', 'BethNW', 'HayleyA', 'LucyB', 'Conor', 'SavR', 'MillieL']

# Arsenal Gold color in hex
arsenal_gold = '#DAA520'

# Display an image at the top of the report
image_path = '/Users/cmunthali/Documents/PYTHON/SALES_REPORTS/gunner_flag.jpg'
st.image(image_path, use_column_width=True)

# App title
st.title('Premium Exec User Performance Dashboard')

# File uploader in the sidebar
uploaded_file = st.sidebar.file_uploader("Choose a sales file", type=['xlsx'])

if uploaded_file is not None:
    # Show a message indicating the file is loading
    st.sidebar.success("File successfully loaded.")
    
    # Initialize a progress bar
    progress_bar = st.sidebar.progress(0)

    # Load the data with progress
    progress_bar.progress(10)
    raw_data = load_data(uploaded_file)
    
    progress_bar.progress(30)
    processed_data = remove_grand_total_row(raw_data)
    processed_data = processed_data.dropna(subset=['Event name'])

    # Preprocess the data
    progress_bar.progress(50)
    processed_data = filter_columns(processed_data, columns_to_keep)
    processed_data = clean_numeric_columns(processed_data, ['Price', 'Discount value', 'Total price'])
    processed_data = split_created_by_column(processed_data)
    processed_data = split_guest_column(processed_data)
    processed_data = convert_date_format(processed_data, 'Created_on')

    progress_bar.progress(100)  # Complete the progress

    # Date range selector in the sidebar
    date_range = st.sidebar.date_input("Select Date Range", [])

    # Ensure only specified users are shown in the user filter
    valid_usernames = [user for user in specified_users if user in pd.unique(processed_data['Created_by'])]

    # Event name filter dropdown in the sidebar
    event_names = pd.unique(processed_data['Event name'])
    selected_events = st.sidebar.multiselect("Select Events", options=event_names, default=event_names)
    
    # Username filter dropdown in the sidebar for multiple selections
    selected_users = st.sidebar.multiselect("Select Execs", options=valid_usernames, default=valid_usernames)

    # Apply filters only if selections are made
    if date_range and selected_users and selected_events:
        min_date, max_date = (pd.Timestamp(date_range[0]), pd.Timestamp(date_range[1]) if len(date_range) == 2 else pd.Timestamp(date_range[0]))
        filtered_data = processed_data[
            (processed_data['Created_on'] >= min_date) &
            (processed_data['Created_on'] <= max_date) &
            (processed_data['Created_by'].isin(selected_users)) &
            (processed_data['Event name'].isin(selected_events))
        ]

        # Display metrics in the main area
        if not filtered_data.empty:
            # Chart dimensions and font settings
            chart_size = (8, 4)  # Size of the charts (width, height)
            font_size_title = 14
            font_size_labels = 10

            # Total Package Sales by Exec
            st.write("### Total Sales Generated by Exec")
            total_package_sales_by_exec = filtered_data.groupby('Created_by')['Total price'].sum().reset_index()
            total_package_sales_by_exec['Total price'] = total_package_sales_by_exec['Total price'].apply(lambda x: f"£{x:,.2f}")
            st.dataframe(total_package_sales_by_exec)
            
            # Bar Chart for Total Package Sales by Exec
            fig, ax = plt.subplots(figsize=chart_size)
            ax.bar(total_package_sales_by_exec['Created_by'], filtered_data.groupby('Created_by')['Total price'].sum(), color=arsenal_gold)
            ax.set_title('Total Package Sales by Exec', fontsize=font_size_title)
            ax.set_xlabel('Exec', fontsize=font_size_labels)
            ax.set_ylabel('Total Package Sales (£)', fontsize=font_size_labels)
            plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
            plt.yticks(fontsize=font_size_labels)
            st.pyplot(fig)

            # Average Sale Value per Exec
            st.write("### Average Sale Value per Exec")
            avg_sale_value_per_exec = filtered_data.groupby('Created_by')['Total price'].mean().reset_index()
            avg_sale_value_per_exec['Total price'] = avg_sale_value_per_exec['Total price'].apply(lambda x: f"£{x:,.2f}")
            st.dataframe(avg_sale_value_per_exec)

            # Bar Chart for Average Sale Value per Exec
            fig, ax = plt.subplots(figsize=chart_size)
            ax.bar(avg_sale_value_per_exec['Created_by'], filtered_data.groupby('Created_by')['Total price'].mean(), color=arsenal_gold)
            ax.set_title('Average Sale Value per Exec', fontsize=font_size_title)
            ax.set_xlabel('Exec', fontsize=font_size_labels)
            ax.set_ylabel('Average Sale Value (£)', fontsize=font_size_labels)
            plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
            plt.yticks(fontsize=font_size_labels)
            st.pyplot(fig)

            # Total Number of Sales per Exec
            st.write("### Total Count of Sales by Exec")
            total_sales_count_by_exec = filtered_data.groupby('Created_by').size().reset_index(name='Total Sales')
            st.dataframe(total_sales_count_by_exec)

            # Bar Chart for Total Number of Sales per Exec
            fig, ax = plt.subplots(figsize=chart_size)
            ax.bar(total_sales_count_by_exec['Created_by'], total_sales_count_by_exec['Total Sales'], color=arsenal_gold)
            ax.set_title('Total Number of Sales per Exec', fontsize=font_size_title)
            ax.set_xlabel('Exec', fontsize=font_size_labels)
            ax.set_ylabel('Total Sales', fontsize=font_size_labels)
            plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
            plt.yticks(fontsize=font_size_labels)
            st.pyplot(fig)

            # Total Discounts Given per Exec
            st.write("### Total Discounts Given per Exec")
            total_discounts_given_by_exec = filtered_data.groupby('Created_by')['Discount value'].sum().reset_index()
            total_discounts_given_by_exec['Discount value'] = total_discounts_given_by_exec['Discount value'].apply(lambda x: f"£{x:,.2f}")
            st.dataframe(total_discounts_given_by_exec)

            # Bar Chart for Total Discounts Given per Exec
            fig, ax = plt.subplots(figsize=chart_size)
            ax.bar(total_discounts_given_by_exec['Created_by'], filtered_data.groupby('Created_by')['Discount value'].sum(), color=arsenal_gold)
            ax.set_title('Total Discounts Given per Exec', fontsize=font_size_title)
            ax.set_xlabel('Exec', fontsize=font_size_labels)
            ax.set_ylabel('Total Discounts (£)', fontsize=font_size_labels)
            plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
            plt.yticks(fontsize=font_size_labels)
            st.pyplot(fig)

            # Revenue Contribution Percentage per Exec
            st.write("### Revenue Contribution Percentage per Exec")
            total_revenue = filtered_data['Total price'].sum()
            revenue_contribution_percentage = filtered_data.groupby('Created_by')['Total price'].sum().reset_index()
            revenue_contribution_percentage['Contribution (%)'] = (revenue_contribution_percentage['Total price'] / total_revenue) * 100
            revenue_contribution_percentage['Contribution (%)'] = revenue_contribution_percentage['Contribution (%)'].apply(lambda x: f"{x:.2f}%")
            st.dataframe(revenue_contribution_percentage[['Created_by', 'Contribution (%)']])

            # Bar Chart for Revenue Contribution Percentage per Exec
            fig, ax = plt.subplots(figsize=chart_size)
            ax.bar(revenue_contribution_percentage['Created_by'], filtered_data.groupby('Created_by')['Total price'].sum() / total_revenue * 100, color=arsenal_gold)
            ax.set_title('Revenue Contribution Percentage per Exec', fontsize=font_size_title)
            ax.set_xlabel('Exec', fontsize=font_size_labels)
            ax.set_ylabel('Contribution (%)', fontsize=font_size_labels)
            plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
            plt.yticks(fontsize=font_size_labels)
            st.pyplot(fig)

        # Save the filtered data to a CSV file in memory
        output = BytesIO()
        output.write(filtered_data.to_csv(index=False).encode('utf-8'))
        output.seek(0)

        # Download button for filtered data
        st.download_button(
            label="Download Filtered Data as CSV",
            data=output,
            file_name='filtered_sales_data.csv',
            mime='text/csv',
        )
