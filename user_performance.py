# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# from io import BytesIO
# from user_performance_calc import (
#     load_data, remove_grand_total_row, filter_columns, clean_numeric_columns, 
#     split_created_by_column, add_additional_info, split_guest_column, convert_date_format,
#     columns_to_keep, competition_fixture, total_budget_packages_data,
#     total_budget_target_data
# )

# def run_app():
#     # Your existing User Performance code
#     specified_users = ['dcoppin', 'Jedwards', 'jedwards', 'bgardiner', 'BenT', 'jmurphy', 'ayildirim',
#                        'MeganS', 'BethNW', 'HayleyA', 'LucyB', 'Conor', 'SavR', 'MillieL']

#     arsenal_gold = '#DAA520'

#     st.title('👤 AFC Premium Exec Dashboard 👤')

#     st.markdown("""
#     ### ℹ️ About
#     This application provides detailed Exec Sales Metrics ONLY, derived from RTS data. To get started, please download the relevant sales report from [RTS](https://www.tjhub3.com/Rts_Arsenal_Hospitality/Suites/HospitalityPackageSales) and upload it here. The app allows you to filter results by date, user, and fixture for tailored insights.
#     """)

#     uploaded_file = st.sidebar.file_uploader("📄 Choose a sales file", type=['xlsx'])

#     if uploaded_file is not None:
#         st.sidebar.success("✅ File successfully loaded.")
#         progress_bar = st.sidebar.progress(0)
#         progress_bar.progress(10)
#         raw_data = load_data(uploaded_file)
#         progress_bar.progress(30)
#         processed_data = remove_grand_total_row(raw_data)
#         processed_data = processed_data.dropna(subset=['Event name'])
#         progress_bar.progress(50)
#         processed_data = filter_columns(processed_data, columns_to_keep)
#         processed_data = clean_numeric_columns(processed_data, ['Price', 'Discount value', 'Total price'])
#         processed_data = split_created_by_column(processed_data)
#         processed_data = split_guest_column(processed_data)
#         processed_data = convert_date_format(processed_data, 'Created_on')
#         progress_bar.progress(100)

#         # Sidebar Features
#         date_range = st.sidebar.date_input("📅 Select Date Range", [])
#         valid_usernames = [user for user in specified_users if user in pd.unique(processed_data['Created_by'])]
#         event_names = pd.unique(processed_data['Event name'])
#         selected_events = st.sidebar.multiselect("🎫 Select Events", options=event_names, default=event_names)
#         selected_users = st.sidebar.multiselect("👤 Select Execs", options=valid_usernames, default=valid_usernames)
#         payment_status_options = pd.unique(processed_data['Payment status'])
#         selected_payment_status = st.sidebar.multiselect("💳 Select Payment Status", options=payment_status_options, default=None)
#         paid_options = pd.unique(processed_data['Paid'])
#         selected_paid = st.sidebar.selectbox("💰 Filter by Paid", options=paid_options) 

#         # Initialize filtered_data with processed_data to ensure no errors occur if no filters are applied
#         filtered_data = processed_data.copy()

#         if date_range:
#             min_date, max_date = (pd.Timestamp(date_range[0]), pd.Timestamp(date_range[1]) if len(date_range) == 2 else pd.Timestamp(date_range[0]))
#             filtered_data = filtered_data[
#                 (filtered_data['Created_on'] >= min_date) &
#                 (filtered_data['Created_on'] <= max_date)
#             ]

#         if selected_users:
#             filtered_data = filtered_data[filtered_data['Created_by'].isin(selected_users)]

#         if selected_events:
#             filtered_data = filtered_data[filtered_data['Event name'].isin(selected_events)]

#         # Apply paid status filter
#         if selected_paid:
#             filtered_data = filtered_data[filtered_data['Paid'] == selected_paid]

#         # Apply payment status filter
#         if selected_payment_status:
#             filtered_data = filtered_data[filtered_data['Payment status'].isin(selected_payment_status)]

#         # Only proceed if filtered_data is not empty
#         if not filtered_data.empty:
#             chart_size = (8, 4)
#             font_size_title = 14
#             font_size_labels = 10

#             st.write("### 💼 Total Sales Generated by Exec")
#             total_sold = filtered_data['Total price'].sum()
#             st.write(f"**Total Accumulated Sales by Premium Exec Team: £{total_sold:,.2f}**")
            
#             total_package_sales_by_exec = filtered_data.groupby('Created_by')['Total price'].sum().reset_index()
#             total_package_sales_by_exec['Total price'] = total_package_sales_by_exec['Total price'].apply(lambda x: f"£{x:,.2f}")
#             st.dataframe(total_package_sales_by_exec)
            
#             fig, ax = plt.subplots(figsize=chart_size)
#             ax.bar(total_package_sales_by_exec['Created_by'], filtered_data.groupby('Created_by')['Total price'].sum(), color=arsenal_gold)
#             ax.set_title('Total Package Sales by Exec', fontsize=font_size_title)
#             ax.set_xlabel('Exec', fontsize=font_size_labels)
#             ax.set_ylabel('Total Package Sales (£)', fontsize=font_size_labels)
#             plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
#             plt.yticks(fontsize=font_size_labels)
#             st.pyplot(fig)

#             st.write("### 📊 Average Sale Value per Exec")
#             avg_sale_value_per_exec = filtered_data.groupby('Created_by')['Total price'].mean().reset_index()
#             avg_sale_value_per_exec['Total price'] = avg_sale_value_per_exec['Total price'].apply(lambda x: f"£{x:,.2f}")
#             st.dataframe(avg_sale_value_per_exec)

#             fig, ax = plt.subplots(figsize=chart_size)
#             ax.bar(avg_sale_value_per_exec['Created_by'], filtered_data.groupby('Created_by')['Total price'].mean(), color=arsenal_gold)
#             ax.set_title('Average Sale Value per Exec', fontsize=font_size_title)
#             ax.set_xlabel('Exec', fontsize=font_size_labels)
#             ax.set_ylabel('Average Sale Value (£)', fontsize=font_size_labels)
#             plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
#             plt.yticks(fontsize=font_size_labels)
#             st.pyplot(fig)

#             st.write("### 🧮 Total Count of Sales by Exec")
#             total_sales_count_by_exec = filtered_data.groupby('Created_by').size().reset_index(name='Total Sales')
#             st.dataframe(total_sales_count_by_exec)

#             fig, ax = plt.subplots(figsize=chart_size)
#             ax.bar(total_sales_count_by_exec['Created_by'], total_sales_count_by_exec['Total Sales'], color=arsenal_gold)
#             ax.set_title('Total Number of Sales per Exec', fontsize=font_size_title)
#             ax.set_xlabel('Exec', fontsize=font_size_labels)
#             ax.set_ylabel('Total Sales', fontsize=font_size_labels)
#             plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
#             plt.yticks(fontsize=font_size_labels)
#             st.pyplot(fig)

#             st.write("### 🏷️ Total Discounts Given per Exec")
#             total_discounts_given_by_exec = filtered_data.groupby('Created_by')['Discount value'].sum().reset_index()
#             total_discounts_given_by_exec['Discount value'] = total_discounts_given_by_exec['Discount value'].apply(lambda x: f"£{x:,.2f}")
#             st.dataframe(total_discounts_given_by_exec)

#             fig, ax = plt.subplots(figsize=chart_size)
#             ax.bar(total_discounts_given_by_exec['Created_by'], filtered_data.groupby('Created_by')['Discount value'].sum(), color=arsenal_gold)
#             ax.set_title('Total Discounts Given per Exec', fontsize=font_size_title)
#             ax.set_xlabel('Exec', fontsize=font_size_labels)
#             ax.set_ylabel('Total Discounts (£)', fontsize=font_size_labels)
#             plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
#             plt.yticks(fontsize=font_size_labels)
#             st.pyplot(fig)

#             st.write("### 📈 Revenue Contribution Percentage per Exec")
#             total_revenue = filtered_data['Total price'].sum()
#             revenue_contribution_percentage = filtered_data.groupby('Created_by')['Total price'].sum().reset_index()
#             revenue_contribution_percentage['Contribution (%)'] = (revenue_contribution_percentage['Total price'] / total_revenue) * 100
#             revenue_contribution_percentage['Contribution (%)'] = revenue_contribution_percentage['Contribution (%)'].apply(lambda x: f"{x:.2f}%")
#             st.dataframe(revenue_contribution_percentage[['Created_by', 'Contribution (%)']])

#             fig, ax = plt.subplots(figsize=chart_size)
#             ax.bar(revenue_contribution_percentage['Created_by'], filtered_data.groupby('Created_by')['Total price'].sum() / total_revenue * 100, color=arsenal_gold)
#             ax.set_title('Revenue Contribution Percentage per Exec', fontsize=font_size_title)
#             ax.set_xlabel('Exec', fontsize=font_size_labels)
#             ax.set_ylabel('Contribution (%)', fontsize=font_size_labels)
#             plt.xticks(rotation=45, ha='right', fontsize=font_size_labels)
#             plt.yticks(fontsize=font_size_labels)
#             st.pyplot(fig)

#             output = BytesIO()
#             output.write(filtered_data.to_csv(index=False).encode('utf-8'))
#             output.seek(0)

#             st.download_button(
#                 label="💾 Download Filtered Data as CSV",
#                 data=output,
#                 file_name='filtered_sales_data.csv',
#                 mime='text/csv',
#             )
#         else:
#             st.warning("⚠️ No data available for the selected filters.")
#     else:
#         st.sidebar.warning("🚨 Please upload a file to proceed.")

# if __name__ == "__main__":
#     run_app()




import streamlit as st
import user_performance_api
import sales_performance
import os

# Authentication function
def login(username, password):
    PASSWORD = "Hospitality2024!"
    ALLOWED_USERNAMES = [
        "srathour@arsenal.co.uk",
        "aroberts@con.arsenal.co.uk",
        "cdixon@arsenal.co.uk",
        "ddacosta@con.arsenal.co.uk",
        "cmunthali@arsenal.co.uk"
    ]
    return username in ALLOWED_USERNAMES and password == PASSWORD

# Initialize session state for authentication
if 'authenticated' not in st.session_state:
    st.session_state['authenticated'] = False
if 'login_clicked' not in st.session_state:
    st.session_state['login_clicked'] = False

# Login button logic
if not st.session_state['authenticated']:
    st.title("🏟️ AFC Venue - MBM Hospitality")
    
    # Description of the app
    st.markdown("""
    **Welcome to the Venue Hospitality Dashboard!**  
    This app provides insights into MBM Sales Performance and User Metrics. 

    **MBM Sales Performance**:  
    Analyse sales from MBM hospitality. 

    **Premium Exec Metrics**:  
    View and evaluate performance metrics from the Premium Team.

    **Note:** You will need to hit the submit button again after successfully entering your login details.
    """)

    if not st.session_state['login_clicked']:
        if st.button("🔐 Login"):
            st.session_state['login_clicked'] = True

    if st.session_state['login_clicked']:
        username = st.text_input("👤 Username (work Email Address)")
        password = st.text_input("🔑 Password", type="password")
        if st.button("Submit"):
            if login(username, password):
                st.session_state['authenticated'] = True
                st.success("🎉 Login successful!")
            else:
                st.error("❌ Username or password is incorrect")

else:
    st.sidebar.title("🧭 Navigation")
    app_choice = st.sidebar.radio("Go to", ["📊 Sales Performance", "📈 User Performance"])

    if app_choice == "📊 Sales Performance":
        sales_performance.run_app()

    elif app_choice == "📈 User Performance":
        user_performance_api.run_app()

    # Add a logout button in the sidebar
    if st.sidebar.button("🔓 Logout"):
        st.session_state['authenticated'] = False
        st.experimental_rerun()  
